import os
import shutil
import datetime

# Define the new content for your Makefiles.
# This is a template string that will be written to each Makefile.
# IMPORTANT: Use a triple-quoted string for multi-line content and
# be sure to use spaces, not tabs, inside the Python string. Make will
# fail if a tab is not used at the beginning of command lines.
# Use a placeholder like {dir_name} to insert the directory's name.
new_makefile_content = """#
# This Makefile was automatically generated by a script.
#
.PHONY: compile sim yosys visualize clean 

TEST_DESIGN = {dir_name}

OSS_CAD_SUITE_PATH = C:\\Users\\13862\\oss-cad-suite

compile: 
\tiverilog -g2012 -Wall -o simv $(TEST_DESIGN).v testbench.v

sim: compile
\tvvp simv > run.log

yosys: sim
\t@call $(OSS_CAD_SUITE_PATH)\\environment.bat && yosys -p "read_verilog $(TEST_DESIGN).v; synth; write_json $(TEST_DESIGN).json"

visualize: yosys
\tnetlistsvg $(TEST_DESIGN).json -o $(TEST_DESIGN).svg

clean:
\tdel /Q simv.* run.log *.vcd *.json *.svg 2>nul || true
"""

def automate_makefiles_recursive(root_dir, new_content):
    """
    Finds and updates all 'Makefile' files in a given root directory and all
    its subdirectories, making the content dependent on the immediate directory name.

    Args:
        root_dir (str): The root directory to start the search from.
        new_content (str): The new content template to write to the Makefiles.
    """
    print(f"Starting to search for Makefiles recursively from '{root_dir}'...")
    # Walk through all directories and subdirectories
    for dirpath, dirnames, filenames in os.walk(root_dir):
        print(f"Checking directory: {dirpath}")
        if 'makefile' in filenames:
            makefile_path = os.path.join(dirpath, 'makefile')
            
            try:
                # Get the name of the subdirectory to use in the Makefile content
                dir_name = os.path.basename(dirpath)
                formatted_content = new_content.format(dir_name=dir_name)

                # Create a backup of the original Makefile
                # timestamp = datetime.datetime.now().strftime("%Y%m%d%H%M%S")
                # backup_path = f"{makefile_path}.bak.{timestamp}"
                # shutil.copy2(makefile_path, backup_path)
                # print(f"Backed up '{makefile_path}' to '{backup_path}'")
                
                # Overwrite the Makefile with the new, formatted content
                with open(makefile_path, 'w') as f:
                    f.write(formatted_content)
                print(f"Successfully updated '{makefile_path}' with content for '{dir_name}'")

            except Exception as e:
                print(f"Failed to process '{makefile_path}': {e}")
    
    print("Process complete.")

if __name__ == "__main__":
    # Specify the root directory of your project
    project_root = './Miscellaneous' # Replace with your project's root path

    # The script will only run if you are NOT using the default path.
    if project_root == '/path/to/your/project':
        print("Please update the 'project_root' variable with the path to your project's root directory.")
    else:
        automate_makefiles_recursive(project_root, new_makefile_content)